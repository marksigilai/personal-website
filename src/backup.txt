body{
    background-color: black;
}

div.feedback_page{
    width: 100%;
    height: 100%;
    margin: 0px;
    padding: 0px;
    background: linear-gradient(90deg, rgba(226,192,1,1) 40%, rgba(11,157,255,1) 80%);
    opacity: 0.9;
}

div.feedback_section{
    opacity: 1;
    padding: 30px;
    border-radius: 35px;
    background-color: rgb(56, 56, 56);
    display: inline-block;
    box-shadow: 0 4px 28px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.767);
    margin: 10vh;
}
h2{
    font-family: Arial, Helvetica, sans-serif;
    font-weight: 100;
    margin: 12px;
    color: white;
    font-size: 4rem;
    padding: 3px;
    border-bottom:1px solid white;
}

.form_container{
    max-width: 26rem;
    padding: 10px;
    margin: 0;
    background-color:rgb(226, 192, 1) ;
    margin-top: 25px;
    border-radius: 12px;
    display: inline-block;
}

.img{
    display: inline;
    max-width: 22rem;
}

input[type=text]{
    font-size: 18px;
    border: 1px solid rgb(56, 56, 56);
    background-color: rgb(56, 56, 56);
    border-radius: 10px;
    margin-top: 5px;
    margin-bottom: 5px;
    padding: 20px;
    width: 22rem;
    color: rgb(177, 177, 177);
    font-family: Arial, Helvetica, sans-serif;
}

textarea{
    color: rgb(177, 177, 177);
    background-color: rgb(56, 56, 56);
    font-size: 18px;
    border: 1px solid rgb(56, 56, 56);
    border-radius: 10px;
    padding: 20px;
    width: 22rem;
    height: 25vh;
    overflow: scroll;
    margin-top: 8px;
    margin-bottom: 8px;
    font-family: Arial, Helvetica, sans-serif;
}
button[type=submit]{
    margin: auto;
    width: 24rem;
    background: linear-gradient(90deg, rgba(179,46,0,1) 0%, rgba(255,82,0,1) 100%);
    border: none;
    border-radius: 10px;
    padding: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
}
h6{
    font-family: Arial, Helvetica, sans-serif;
    color: white;
    font-size: 17px;
    padding: 0%;
    margin: 0;
    display: grid;
    text-align: center;
    padding-left: 140px;
    font-weight: 500;
}
*:focus{
    outline: none;
}
button[type=submit]:hover,input[type=submit]:focus {
    background-color: rgb(179, 49, 2);
    border: none;
}

.error{
    border: 1px solid red;
}

img{
    max-width: 600px;
    max-height: 600px;
    z-index: -5;
    float: left;
    transform: scaleX(-1);
}

h5{ 
    margin: 18px;
    font-family: Arial, Helvetica, sans-serif;
    color: rgb(75, 75, 75);
    text-align: left;
    font-size: 22px;
}


::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
    color: rgb(177, 177, 177);
    opacity: 1; /* Firefox */
}
  
:-ms-input-placeholder { /* Internet Explorer 10-11 */
    color: rgb(177, 177, 177);
}
  
::-ms-input-placeholder { /* Microsoft Edge */
    color: rgb(177, 177, 177);
}
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input:-webkit-autofill:active {
    transition: background-color 5000s ease-in-out 0s;
    -webkit-text-fill-color: rgb(177, 177, 177) !important;
}












------------------------------------------------------------------------------------------------------------------------------








import React, { Component} from 'react';
import styles from '../styles/addfeedback.module1.css';
import feedback_img from '../images/flame-5-cropped.png'

class AddFeedback extends Component{

    constructor(props) {
        super(props);
        this.state = { 
            feedback_name: '',
            feedback_email: '',
            feedback_message: '',
            feedback_success: false,
            width: window.innerWidth,
            height: window.innerHeight,
            removed: null
        };
        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)
    }

    componentDidMount() {
        this.updateWindowDimensions();
        window.addEventListener('resize', this.updateWindowDimensions);
    }
  
    componentWillUnmount() {
        window.removeEventListener('resize', this.updateWindowDimensions);
    }
  
    updateWindowDimensions() {
        this.setState({ width: window.innerWidth, height: window.innerHeight });
        console.log(this.state.width)
        var img
        if((this.state.width <= 1000) && !this.state.removed){
            img = document.getElementById('image')
            img.parentNode.removeChild(img)
            this.setState({removed : true})
        }
    }

    validate = () => {
        var valid = false;
        if(this.state.feedback_name){
            valid = true
        }
        return valid
    }

    newFeedback = () => {
        this.setState({ feedback_success: false })
    }
    myChangeHandler = (event) => {
        let nam = event.target.name;
        let val = event.target.value;
        this.setState({[nam]: val});
        
    }


    handleSubmit = (event) => {
        event.preventDefault()
        console.log(this.state)

        //TODO: CALL FORM VALIDATION HERE, PASS ALL STATES
        const requestOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(this.state)

        };
        fetch('http://localhost:3002/feedback', requestOptions)
        .then(response => {
            response.json()
            if(!response.ok){
                throw new Error("The response was not ok")
            }else{
                this.setState({ feedback_success: true,
                    feedback_name: '',
                    feedback_email: '',
                    feedback_message: '',
                })
            }
            console.log(this.state.feedback_success)
        })
        .catch(error => (console.log("Error with the fetch : " + error)));
    }

    render(){
        const arrow_style = {
            fontSize:"24px",
            marginLeft: '120px',
            color: "white"
        }
        if(this.state.feedback_success){
            return(
                //TODO: ANIMATION TO A HAPPY FACE OR TICK
                //LOTS OF ANIMATION IMAGES
                <div className="submitted"> 
                    <h3>Submitted</h3>
                    <button onClick={this.newFeedback.bind(this)}>Submit More Feedback</button>
                </div>
            )
        }else{
            return(
                <div className = {styles.feedback_page}>
                    <div className = {styles.feedback_section}>
                        <h2>We value your feedback! </h2>

                        <div className = {styles.form_container}>
                            <form method="POST" onSubmit={this.handleSubmit}>
                                <h5>Fill out the form and we'll be in touch as soon as possible! </h5>
                                <input id="feedback_name" placeholder= "Name" value = {this.state.feedback_name} name="feedback_name" type="text" onChange={this.myChangeHandler}/>
                                <br/>
                                <input id="feedback_email" placeholder="Email" value= {this.state.feedback_email} name = "feedback_email" type="text" onChange={this.myChangeHandler}/>
                                <br/>
                                <textarea id="feedback_message" placeholder="Message..." value= {this.state.feedback_message} name = "feedback_message" type="text" onChange={this.myChangeHandler}></textarea>
                                <br/>
                                <button type="submit" value="Send">
                                    <h6>Send</h6>   
                                    <i class="material-icons" style={arrow_style} >arrow_forward</i>
                                </button>
                            </form>
                        </div>
                        
                        <div className = {styles.img}>
                            <img src={feedback_img} alt = "Feedback Side" id='image'></img>
                        </div>
                    </div>
                </div>
            );
        }
    }
}

export default AddFeedback;





........................................................






import React, { Component } from 'react';
import styles from '../styles/landing.module.css'
import  { Power3, Power1, gsap, Linear, TimelineMax} from 'gsap'


class Landing extends Component{
  constructor(props){
    super(props)
    this.state = [

    ]
    this.handles = React.createRef()
    this.subheading = React.createRef()
    this.main = React.createRef()
    this.briefcase = React.createRef()
    this.arrow = React.createRef()
    this.btn = React.createRef()
    this.landing = React.createRef()
    this.middleground = React.createRef()
    this.foreground = React.createRef()

  }


  async componentDidMount() {
    await this.handles.current
    await this.subheading.current
    await this.main.current
    await this.btn.current
    await this.middleground.current


 
    var tl = new TimelineMax({
      repeat: -1
    });

    tl.to(this.main.current, 200, {
      backgroundPosition: "-2247px bottom",
      force3D:true,
      rotation:0.01,
      z:0.01,
      //autoRound:false,
      ease: Linear.easeNone
    });

    var tl2 = new TimelineMax({
      repeat: -1
    });

    tl2.from([this.briefcase.current, this.handles.current], 1, {
      y: -20,
      ease: Power1.easeInOut
    }).to([this.briefcase.current, this.handles.current], 1, {
      y: -20,
      ease: Power1.easeInOut
    });

    var tl3 = new TimelineMax({
      repeat: -1
    });
    
    tl3.to(this.middleground.current, 60, {
      backgroundPosition: "-2247px bottom",
      force3D:true,
      rotation:0.01,
      z:0.01,
      //autoRound:false,
      ease: Linear.easeNone
    });

    var tl4 = new TimelineMax({
      repeat: -1
    });
    
    tl4.from(this.foreground.current, 1, {
      backgroundSize: "370px",
      ease: Power1.easeInOut
    }).to(this.foreground.current, 1, {
      backgroundSize: "370px",
      ease: Power1.easeInOut
    });







      
    
  }


  async handleHover(){

  }


  render() {
    return (
        <div ref={this.main} className={styles.main}>

          <div className={styles.hand}></div>

          <span ref={this.handles} className={styles.handles}>
            <span className={styles.inset}></span>
          </span>

          <div ref={this.briefcase} className={styles.landing}>
            <div className={styles.info_container}>
              <h3 ref={this.hello}><span>HELLO</span> I'm</h3>
              <h1 ref={this.title} className={styles.title}>Mark Sigilai</h1>
              <h2 ref={this.subheading} className={styles.subtitle}>Junior software developer</h2>
              <div ref={this.strap} className={styles.strap1}></div>
              <div ref={this.strap} className={styles.strap2}></div>
            </div>   
          </div>
          
          <div ref={this.middleground} className={styles.middleground}></div>
          <div ref={this.foreground}  className={styles.foreground}></div>


          <button id="btn" ref={this.btn} className={styles.btn} type='button'>
            <h4>EXPLORE</h4>
            <span ref={this.arrow} class="material-icons">keyboard_arrow_down</span>
          </button>



          

        </div>
    )
  }
}

export default Landing;




--------------------------------------------------------------------






import React, { Component} from 'react';
import propTypes from 'prop-types'
import styles from '../styles/project.module.css'
import  { Power3, TimelineLite} from 'gsap'
import { CSSTransition } from 'react-transition-group';


class Project extends Component{

    constructor(props){
        super(props)

        this.state = {
            key : null
        }


    }
    

    animate(id, index){
 
        this.setState({key : id})

        var tl1 = new TimelineLite()
        var tl2 = new TimelineLite()

        var paragraphs = document.getElementsByName('paragraph')
        var infos = document.getElementsByName('information')
    
        
        tl1.to(infos[0], 3, {x:-200, opacity: 0, ease:Power3.easeInOut})
    
        //tl2.from(infos[0], 3, {x:-200, opacity: 0, ease:Power3.easeInOut})
    }

    render(){

        

        return(
            <div className={styles.container}>
                <div className={styles.banner}>
                    <span class="material-icons">explore</span>
                    <h1>...my projects</h1>
                    <p> a list of some of the recent school and personal projects I have worked on.</p>
                </div>

                <div className={styles.wrapper}>
                    {this.props.projects.map((project, index) => {
                        console.log(index)
                        return(
                            <div className={styles.project} key = {project.id}>
                                <div className={styles.project_number}>#{index+1}</div>
                                
                                <h2 className={styles.title}>{ project.title } </h2>

                                
                                    {!(this.state.key === project.id) && 
                                        <CSSTransition key={project.id} timeout={10000} classNames="slide" >
                                            <p name="paragraph" className={styles.paragraph}> {project.description} </p>
                                            <div className={styles.btn}>
                                                <button type='button' onClick = {() => this.setState({key:project})}>More Info</button>
                                                <span class="material-icons">
                                                    keyboard_arrow_right
                                                </span>
                                            </div>  
                                        </CSSTransition>
                                            
                                    }
                                

                                
                                    {this.state.key === project.id && 
                                        <CSSTransition key={project.id} timeout={1000} classNames="slide">
                                            <div name="information" className={styles.info} >{project.information}</div>
                                            <div className={styles.btn}>
                                                <span class="material-icons">
                                                    keyboard_arrow_left
                                                </span>
                                                <button type='button' onClick = {() => this.setState({key : null})}>Back</button>
                                            </div>
                                        </CSSTransition>
                                    }
                            </div>
                        )

                    }
                        
                    )}
                </div>
            </div>
        );
    }
}

Project.propTypes = {
    projects: propTypes.array.isRequired
}

export default Project;



--------------------------





const express = require('express');
const app = express();
const mysql = require('mysql');

const cors = require('cors')
const bodyparser = require('body-parser')
app.use(cors())
app.use(bodyparser.json())

app.all('/', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    next()
  });

//TODO: FORM VALIDATION IN NODEJS?


const connection = mysql.createConnection({
    host : "localhost",
    user : "root",
    password : "123qwa",
    database : "personal_website"
})

//root
app.get("", (req, resp) => {
    resp.status(200).json("Nothing to send")
})

//root
app.post("", (req, resp) => {
    resp.status(200).json("Nothing to send")
})

//get feedback or project by specific id
app.get("/:page/:id", (req, resp) => {
    const connection = mysql.createConnection({
        host : "localhost",
        user : "root",
        password : "123qwa",
        database : "personal_website"
    })
    const query = "SELECT * FROM " + req.params.page + " WHERE id = " + req.params.id
    connection.query(query, (err, rows, fields) => {
        if(err){
            resp.sendStatus(500)
            resp.end()
            return
        }else{
            resp.sendStatus(200)
            resp.json(rows)
            resp.end()
        }
        
    })
})
//get the entire feedback or projects database
app.get("/:page", (req, resp) => {
    const query = "SELECT * FROM " + req.params.page 
    connection.query(query, (err, rows, fields) => {
        if(err){
            resp.status(500).json("Error getting the page")
            resp.end()
        }else{
            resp.status(200).json(rows)
            resp.end()
        }
        
    })
})

//insert a project to projects
app.post("/projects", (req, resp) => {
    console.log("Here4")
    const query = "INSERT INTO projects (title, description, information, url) VALUES ( '" + req.body.project_title + "' , '" + req.body.project_description + "' , '" + req.body.project_information + "' , '" + req.body.project_url + "' )"
    console.log(query)
    connection.query(query, (err, rows, fields) => {
        if(err){
            resp.status(500).json("error with the post")
            resp.end()
        }else{
            resp.status(200).json("Successfully entered the data to projects")
            resp.end()
            console.log("Successfully entered the data to projects")
        }
    })
})

//insert a value for feedback to feedback
app.post("/feedback", (req, resp) => {
    console.log("Here5")
    var name = req.body
    console.log(name)
    const query = "INSERT INTO feedback (name, email, message)  VALUES ( '" + req.body.feedback_name + "' , '" + req.body.feedback_email + "' , '" + req.body.feedback_message + "' )"
    connection.query(query, (err, rows, fields) => {
        if(err){
            console.log("There was an error with the insert")
            resp.status(500).json("There was an error with the insert")
            resp.end()
        }else{
            console.log("Successfully entered the data to db: feedback")
            resp.status(200).json("Successfully entered the data to feedback")
            resp.end()
        }
        //resp.redirect('/')
    })
})
//delete a value from a database 
app.delete(("/:page/:id"), (req, resp) => {
    console.log("Here6")
    var db = req.params.page
    var id = req.params.id
    console.log("This is the db "+ db + " and the id "+ id)
    var query  = "DELETE FROM " + db + " WHERE id = '" + id + "'"
    connection.query(query, (err, results, fields) => {
        if(err){
            resp.status(500).json("There was an error with the delete")
            console.log("There was an error with the delete")
            resp.end()
        }else{
            console.log("Successfully deleted")
            resp.status(200).json("Successfully deleted")
            resp.end()
        }
    })

})

//validate a password
app.post(("/login"),(req, resp) => {
    var query = "SELECT * FROM passwords WHERE username='sigilai'"
    console.log(req.body.password)
    connection.query(query, (error, results, fields) => {
        if(error){
            resp.status(500).json("There was a password error")
            console.log("There was a password error")
            resp.end()
        }else{
            //if the passwords match
            console.log(JSON.stringify(results) +  " and " + req.body.password)

            if(req.body.password == results[0].password){
                resp.status(200).json({outcome : 'match'})
                resp.end()
            }
            else{
                resp.status(200).json({outcome : "no match"})
                resp.end()
            }
        }
    })

})


app.listen(3002, () => {})